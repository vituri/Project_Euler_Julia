[
  {
    "objectID": "qmds/p001.html",
    "href": "qmds/p001.html",
    "title": "Problem 1",
    "section": "",
    "text": "Problem\n\n\n\n\nIf we list all the natural numbers below \\(10\\) that are multiples of \\(3\\) or \\(5\\), we get \\(3, 5, 6\\) and \\(9\\). The sum of these multiples is \\(23\\).\n\n\nFind the sum of all the multiples of \\(3\\) or \\(5\\) below \\(1000\\).\n\n\n\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:999 if (x % 3 == 0 || x % 5 == 0)] |&gt; sum\nend;\n\np1()\n\n233168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\n\nBenchmarkTools.Trial: 10000 samples with 8 evaluations.\n Range (min … max):  3.527 μs … 209.154 μs  ┊ GC (min … max): 0.00% … 96.28%\n Time  (median):     3.684 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.221 μs ±   5.147 μs  ┊ GC (mean ± σ):  4.13% ±  3.41%\n  ▃▇█▇▆▄▃▂▂▂▁▁▁▁▁        ▁▂▃▄▄▄▃▃▂▁▁▁▁▁       ▁▁▁             ▂\n  ████████████████▇▅▅▆▄▅▆███████████████████████████▇▇▇▆█▅▇▇▅ █\n  3.53 μs      Histogram: log(frequency) by time      5.99 μs &lt;\n Memory estimate: 7.61 KiB, allocs estimate: 6."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Euler with Julia",
    "section": "",
    "text": "Preface\nSolving the problems in Project Euler using Julia and, sometimes, R and Python.\nThis is intended to be an exercise on algorithms and optimization, and, of course, to show how fast Julia is :D"
  },
  {
    "objectID": "qmds/p012.html",
    "href": "qmds/p012.html",
    "title": "Problem 12",
    "section": "",
    "text": "Problem\n\n\n\n\nThe sequence of triangle numbers is generated by adding the natural numbers. So the \\(7\\)th triangle number would be \\(1 + 2 + 3 + 4 + 5 + 6 + 7 = 28\\). The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, $$\n\n\nWe can see that \\(28\\) is the first triangle number to have over five divisors.\n\n\nWhat is the value of the first triangle number to have over five hundred divisors?\n\n\n\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:999 if (x % 3 == 0 || x % 5 == 0)] |&gt; sum\nend;\n\np1()\n\n233168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\n\nBenchmarkTools.Trial: 10000 samples with 8 evaluations.\n Range (min … max):  3.533 μs … 140.788 μs  ┊ GC (min … max): 0.00% … 93.80%\n Time  (median):     3.656 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   3.876 μs ±   4.012 μs  ┊ GC (mean ± σ):  3.57% ±  3.35%\n    ▁▅█▅▁                                                      \n  ▂▄██████▅▅▄▃▃▃▃▂▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▂▂▂ ▃\n  3.53 μs         Histogram: frequency by time        4.84 μs &lt;\n Memory estimate: 7.61 KiB, allocs estimate: 6."
  },
  {
    "objectID": "qmds/p013.html",
    "href": "qmds/p013.html",
    "title": "Problem 13",
    "section": "",
    "text": "Problem\n\n\n\n\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n\nn\n\n\n\nfunction p13()\n    str = \"37107287533902102798797998220837590246510135740250\n    46376937677490009712648124896970078050417018260538\n    74324986199524741059474233309513058123726617309629\n    91942213363574161572522430563301811072406154908250\n    23067588207539346171171980310421047513778063246676\n    89261670696623633820136378418383684178734361726757\n    28112879812849979408065481931592621691275889832738\n    44274228917432520321923589422876796487670272189318\n    47451445736001306439091167216856844588711603153276\n    70386486105843025439939619828917593665686757934951\n    62176457141856560629502157223196586755079324193331\n    64906352462741904929101432445813822663347944758178\n    92575867718337217661963751590579239728245598838407\n    58203565325359399008402633568948830189458628227828\n    80181199384826282014278194139940567587151170094390\n    35398664372827112653829987240784473053190104293586\n    86515506006295864861532075273371959191420517255829\n    71693888707715466499115593487603532921714970056938\n    54370070576826684624621495650076471787294438377604\n    53282654108756828443191190634694037855217779295145\n    36123272525000296071075082563815656710885258350721\n    45876576172410976447339110607218265236877223636045\n    17423706905851860660448207621209813287860733969412\n    81142660418086830619328460811191061556940512689692\n    51934325451728388641918047049293215058642563049483\n    62467221648435076201727918039944693004732956340691\n    15732444386908125794514089057706229429197107928209\n    55037687525678773091862540744969844508330393682126\n    18336384825330154686196124348767681297534375946515\n    80386287592878490201521685554828717201219257766954\n    78182833757993103614740356856449095527097864797581\n    16726320100436897842553539920931837441497806860984\n    48403098129077791799088218795327364475675590848030\n    87086987551392711854517078544161852424320693150332\n    59959406895756536782107074926966537676326235447210\n    69793950679652694742597709739166693763042633987085\n    41052684708299085211399427365734116182760315001271\n    65378607361501080857009149939512557028198746004375\n    35829035317434717326932123578154982629742552737307\n    94953759765105305946966067683156574377167401875275\n    88902802571733229619176668713819931811048770190271\n    25267680276078003013678680992525463401061632866526\n    36270218540497705585629946580636237993140746255962\n    24074486908231174977792365466257246923322810917141\n    91430288197103288597806669760892938638285025333403\n    34413065578016127815921815005561868836468420090470\n    23053081172816430487623791969842487255036638784583\n    11487696932154902810424020138335124462181441773470\n    63783299490636259666498587618221225225512486764533\n    67720186971698544312419572409913959008952310058822\n    95548255300263520781532296796249481641953868218774\n    76085327132285723110424803456124867697064507995236\n    37774242535411291684276865538926205024910326572967\n    23701913275725675285653248258265463092207058596522\n    29798860272258331913126375147341994889534765745501\n    18495701454879288984856827726077713721403798879715\n    38298203783031473527721580348144513491373226651381\n    34829543829199918180278916522431027392251122869539\n    40957953066405232632538044100059654939159879593635\n    29746152185502371307642255121183693803580388584903\n    41698116222072977186158236678424689157993532961922\n    62467957194401269043877107275048102390895523597457\n    23189706772547915061505504953922979530901129967519\n    86188088225875314529584099251203829009407770775672\n    11306739708304724483816533873502340845647058077308\n    82959174767140363198008187129011875491310547126581\n    97623331044818386269515456334926366572897563400500\n    42846280183517070527831839425882145521227251250327\n    55121603546981200581762165212827652751691296897789\n    32238195734329339946437501907836945765883352399886\n    75506164965184775180738168837861091527357929701337\n    62177842752192623401942399639168044983993173312731\n    32924185707147349566916674687634660915035914677504\n    99518671430235219628894890102423325116913619626622\n    73267460800591547471830798392868535206946944540724\n    76841822524674417161514036427982273348055556214818\n    97142617910342598647204516893989422179826088076852\n    87783646182799346313767754307809363333018982642090\n    10848802521674670883215120185883543223812876952786\n    71329612474782464538636993009049310363619763878039\n    62184073572399794223406235393808339651327408011116\n    66627891981488087797941876876144230030984490851411\n    60661826293682836764744779239180335110989069790714\n    85786944089552990653640447425576083659976645795096\n    66024396409905389607120198219976047599490197230297\n    64913982680032973156037120041377903785566085089252\n    16730939319872750275468906903707539413042652315011\n    94809377245048795150954100921645863754710598436791\n    78639167021187492431995700641917969777599028300699\n    15368713711936614952811305876380278410754449733078\n    40789923115535562561142322423255033685442488917353\n    44889911501440648020369068063960672322193204149535\n    41503128880339536053299340368006977710650566631954\n    81234880673210146739058568557934581403627822703280\n    82616570773948327592232845941706525094512325230608\n    22918802058777319719839450180888072429661980811197\n    77158542502016545090413245809786882778948721859617\n    72107838435069186155435662884062257473692284509516\n    20849603980134001723930671666823555245252804609722\n    53503534226472524250874054075591789781264330331690\"\n\n    numbers = \n        split(str, \"\\n\") .|&gt; \n        (x -&gt; parse(BigInt, x))\n\n    total = sum(numbers)\n\n    ten_digits = string(total)[1:10]\n\n    return ten_digits\nend;\n\np13()\n\n\"5537376230\"\n\n\n\nusing BenchmarkTools;\n@benchmark p13()\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  18.441 μs …  13.271 ms  ┊ GC (min … max): 0.00% … 51.86%\n Time  (median):     19.703 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   22.869 μs ± 174.356 μs  ┊ GC (mean ± σ):  5.37% ±  0.70%\n    ▃█▆▄                                                        \n  ▂▆█████▇▇▆▅▅▄▃▃▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂\n  18.4 μs         Histogram: frequency by time         31.4 μs &lt;\n Memory estimate: 19.82 KiB, allocs estimate: 411."
  },
  {
    "objectID": "qmds/p003.html",
    "href": "qmds/p003.html",
    "title": "Problem 3",
    "section": "",
    "text": "Problem\n\n\n\n\nThe prime factors of \\(13195\\) are \\(5, 7, 13\\) and \\(29\\).\n\n\nWhat is the largest prime factor of the number \\(600851475143\\)?\n\n\n\n\nJulia\n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\n\nfunction p3()\n  n = 600851475143\n  \n  # get all primes lesses than sqrt(n)\n  possible_primes = sieve_of_eratosthenes(isqrt(n)) # see prelude\n  \n  # get the biggest one\n  id = findlast(x -&gt; n % x == 0, possible_primes)    \n  return possible_primes[id]\nend;\n\np3()\n\n6857\n\n\n\nusing BenchmarkTools;\n@benchmark p3()\n\n\nBenchmarkTools.Trial: 1940 samples with 1 evaluation.\n Range (min … max):  2.252 ms …   4.883 ms  ┊ GC (min … max): 0.00% … 14.02%\n Time  (median):     2.475 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   2.574 ms ± 276.877 μs  ┊ GC (mean ± σ):  1.99% ±  4.32%\n       ▇█▃▁                                                    \n  ▃▂▃▃▅██████▇▅▄▄▄▄▃▄▃▃▃▃▄▃▃▃▃▃▃▂▂▃▃▂▂▃▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▃\n  2.25 ms         Histogram: frequency by time        3.67 ms &lt;\n Memory estimate: 6.48 MiB, allocs estimate: 8."
  },
  {
    "objectID": "qmds/p005.html",
    "href": "qmds/p005.html",
    "title": "Problem 5",
    "section": "",
    "text": "Problem\n\n\n\n\n\\(2520\\) is the smallest number that can be divided by each of the numbers from \\(1\\) to \\(10\\) without any remainder.\n\n\nWhat is the smallest positive number that is evenly divisibledivisible with no remainder by all of the numbers from \\(1\\) to \\(20\\)?\n\n\n\n\nJulia (using lcm)\n\np5() = lcm(1:20...);\np5()\n\n232792560\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\n\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\n Range (min … max):  1.131 ns … 17.490 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.142 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.145 ns ±  0.172 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  ▁ ▆                        ▃  █                          ▆ ▁\n  █▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁█ █\n  1.13 ns      Histogram: log(frequency) by time     1.15 ns &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\n\nJulia\n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\n\nfunction prime_decomposition(n::Integer)\n    possible_primes = sieve_of_eratosthenes(n)\n    temp_n = n\n    dec = Int32[]\n\n    while temp_n &gt; 1\n        for p ∈ possible_primes\n            q, r = divrem(temp_n, p)            \n            if iszero(r)\n                temp_n = temp_n ÷ p\n                push!(dec, p)\n                break\n            end\n        end\n    end\n    return dec\nend;\n\nfunction p5()\n    decomposition = map(prime_decomposition, 2:20)\n    distinct_primes = vcat(decomposition...) |&gt; unique\n\n    count_matrix = \n    map(distinct_primes) do p\n        map(decomposition) do d\n            count(==(p), d)\n        end\n    end |&gt; stack\n\n    primes_powers = map(maximum, eachcol(count_matrix))\n\n    n = (distinct_primes .^ primes_powers) |&gt; prod\n\n    return n\nend;\n\np5()\n\n232792560\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\n\nBenchmarkTools.Trial: 10000 samples with 6 evaluations.\n Range (min … max):  5.089 μs … 541.824 μs  ┊ GC (min … max):  0.00% … 96.15%\n Time  (median):     5.488 μs               ┊ GC (median):     0.00%\n Time  (mean ± σ):   6.522 μs ±  20.674 μs  ┊ GC (mean ± σ):  12.90% ±  4.02%\n   ▁▄▆▇███▇▆▅▄▄▃▂▂▂▂▂▁▁▁▁▁▂▁▁▁▁▂▁                             ▂\n  ▅██████████████████████████████████████▆▆▇▇▇▆▇▇▆▆▆▆▄▅▂▂▄▄▄▄ █\n  5.09 μs      Histogram: log(frequency) by time      8.29 μs &lt;\n Memory estimate: 12.66 KiB, allocs estimate: 142."
  },
  {
    "objectID": "qmds/p009.html",
    "href": "qmds/p009.html",
    "title": "Problem 9",
    "section": "",
    "text": "Problem\n\n\n\n\nA Pythagorean triplet is a set of three natural numbers, \\(a \\lt b \\lt c\\), for which, \\(a^2 + b^2 = c^2.\\)\n\n\nFor example, \\(3^2 + 4^2 = 9 + 16 = 25 = 5^2\\).\n\n\nThere exists exactly one Pythagorean triplet for which \\(a + b + c = 1000\\).Find the product \\(abc\\).\n\n\n\n\nJulia\n\nfunction p9()\n    for a ∈ 1:999\n        for b ∈ 1:999            \n            c = 1000 - a - b\n            c &gt;= 1 || continue\n            a^2 + b^2 == c^2 || continue                        \n            return a, b, c\n        end\n    end\nend;\n\np9()\n\n(200, 375, 425)\n\n\n\nusing BenchmarkTools;\n@benchmark p9()\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  86.977 μs … 246.105 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     87.018 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   87.964 μs ±   5.897 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  █▅▆▃▁▁    ▁                                                  ▁\n  ███████▇▇▇██▇▆▅▇▆▆▄▅▅▄▄▅▇█▆▆▆▅▆▅▄▅▄▄▃▄▄▃▄▃▆▃▁▃▃▃▃▅▆▅▆▅▅▃▅▄▃▅ █\n  87 μs         Histogram: log(frequency) by time       102 μs &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\n\nJulia (using JuMP)\n\nusing JuMP; using SCIP;\n\nfunction p9()\n  model = Model(SCIP.Optimizer)\n  set_silent(model)\n  @variable(model, a &gt;= 1, Int)\n  @variable(model, b &gt;= 1, Int)\n  @variable(model, c &gt;= 1, Int)\n  @objective(model, Min, a)\n  @constraint(model, pitagorean, a^2 + b^2 == c^2)\n  @constraint(model, sum_1000, a + b + c == 1000)  \n  optimize!(model)    \n  return value(a), value(b), value(c)\nend;\np9()\n\n(200.0, 375.0, 425.0)\n\n\n\nusing BenchmarkTools;\n@benchmark p9()\n\n\nBenchmarkTools.Trial: 56 samples with 1 evaluation.\n Range (min … max):  87.783 ms … 129.658 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     88.584 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   90.590 ms ±   6.783 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  ▃█                                                            \n  ███▃▃▃▁▃▄▁▁▁▁▃▁▁▃▃▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▁\n  87.8 ms         Histogram: frequency by time          116 ms &lt;\n Memory estimate: 120.80 KiB, allocs estimate: 5135."
  },
  {
    "objectID": "qmds/p010.html",
    "href": "qmds/p010.html",
    "title": "Problem 10",
    "section": "",
    "text": "Problem\n\n\n\n\nThe sum of the primes below \\(10\\) is \\(2 + 3 + 5 + 7 = 17\\).\n\n\nFind the sum of all the primes below two million.\n\n\n\n\nJulia\n\n# define a function that give prime numbers up to n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\n\nfunction p10()\n  sieve_of_eratosthenes(2_000_000) |&gt; sum\nend;\np10()\n\n142913828922\n\n\n\nusing BenchmarkTools;\n@benchmark p10()\n\n\nBenchmarkTools.Trial: 731 samples with 1 evaluation.\n Range (min … max):  6.044 ms …  12.173 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     6.562 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   6.841 ms ± 888.353 μs  ┊ GC (mean ± σ):  1.86% ± 2.71%\n    ▃██▄▂                                                      \n  ▃▄██████▇▆▅▄▄▄▄▃▃▃▃▂▂▂▂▁▂▂▂▃▂▂▃▂▂▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▂▁▂▂▂ ▃\n  6.04 ms         Histogram: frequency by time        11.5 ms &lt;\n Memory estimate: 16.63 MiB, allocs estimate: 8."
  },
  {
    "objectID": "qmds/p014.html",
    "href": "qmds/p014.html",
    "title": "Problem 14",
    "section": "",
    "text": "Problem\n\n\n\n\nThe following iterative sequence is defined for the set of positive integers:\n\n\n\n\\(n \\to n/2\\) (\\(n\\) is even)\n\n\n\\(n \\to 3n + 1\\) (\\(n\\) is odd)\n\n\n\nUsing the rule above and starting with \\(13\\), we generate the following sequence: \\(13 \\to 40 \\to 20 \\to 10 \\to 5 \\to 16 \\to 8 \\to 4 \\to 2 \\to 1.\\)\n\n\nIt can be seen that this sequence (starting at \\(13\\) and finishing at \\(1\\)) contains \\(10\\) terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at \\(1\\).\n\n\nWhich starting number, under one million, produces the longest chain?\n\n\nNOTE: Once the chain starts the terms are allowed to go above one million.\n\n\n\n\nJulia\n\nfunction collatz(n::Integer)\n    seq = BigInt[]\n\n    s = BigInt(n)\n\n    while s &gt; 1\n        push!(seq, s)\n\n        if s % 2 == 0\n            s = div(s, 2)\n        else\n            s = 3*s + 1\n        end\n    end \n\n    push!(seq, 1)\n    \n    return seq\nend\n\ncollatz (generic function with 1 method)\n\n\n\nfunction p14()\n\n    n, max_chain_length = 1, 1\n\n    for i ∈ 1:999_999\n        c = collatz(i)\n        l = length(c)\n\n        if l &gt; max_chain_length\n            n, max_chain_length = i, l\n        end\n    end\n\n    return \"The biggest chain starts in $n and has $max_chain_length\"\nend;\n\np14()\n\n\"The biggest chain starts in 837799 and has 525\"\n\n\n\nusing BenchmarkTools;\n@benchmark p14()\n\n\nBenchmarkTools.Trial: 1 sample with 1 evaluation.\n Single result which took 44.955 s (30.41% GC) to evaluate,\n with a memory estimate of 23.36 GiB, over 1146910302 allocations."
  },
  {
    "objectID": "p001.html",
    "href": "p001.html",
    "title": "Problem 1",
    "section": "",
    "text": "Problem\n\n\n\n\nIf we list all the natural numbers below \\(10\\) that are multiples of \\(3\\) or \\(5\\), we get \\(3, 5, 6\\) and \\(9\\). The sum of these multiples is \\(23\\).\n\n\nFind the sum of all the multiples of \\(3\\) or \\(5\\) below \\(1000\\).\n\n\n\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:999 if (x % 3 == 0 || x % 5 == 0)] |&gt; sum\nend;\n\np1()\n\n233168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\n\nBenchmarkTools.Trial: 10000 samples with 8 evaluations.\n Range (min … max):  3.540 μs … 258.099 μs  ┊ GC (min … max): 0.00% … 95.67%\n Time  (median):     3.712 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.299 μs ±   5.918 μs  ┊ GC (mean ± σ):  4.68% ±  3.41%\n  ▅██▆▄▂▁▁▁▁     ▂▄▅▄▄▃▂▂▃▂▂▁                                 ▂\n  ████████████▇▇▆█████████████████▇▇▇▆▇▇███▆▆▅▅▆▆▅▆▄▆▅▄▄▄▅▄▃▄ █\n  3.54 μs      Histogram: log(frequency) by time      7.05 μs &lt;\n Memory estimate: 7.61 KiB, allocs estimate: 6."
  },
  {
    "objectID": "p002.html",
    "href": "p002.html",
    "title": "Problem 2",
    "section": "",
    "text": "Problem\n\n\n\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with \\(1\\) and \\(2\\), the first \\(10\\) terms will be: \\(1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\dots\\)\n\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\n\n\nJulia\n\nfunction p2()\n    a, b = 1, 2\n    sum = 2\n    while true\n        current_fibo_term = a + b\n        current_fibo_term &gt; 4_000_000 && break\n        iseven(current_fibo_term) && (sum += current_fibo_term)\n        a, b = b, current_fibo_term\n    end\n    return sum\nend;\np2()\n\n4613732\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\n\nBenchmarkTools.Trial: 10000 samples with 998 evaluations.\n Range (min … max):  15.992 ns … 36.813 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     16.012 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   17.000 ns ±  2.094 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  █   ▃ ▂    ▅                                              ▅ ▁\n  █▄▁▃█▃██▁▄▃██▄▅▇▆▄█▃▄▄▅▃▄▅▃▁▄▃▃▃▃▄▃▄▄▃▁▃▁▁▄▃▄▁▃▃▁▃▃▁█▁█▄█▃█ █\n  16 ns        Histogram: log(frequency) by time      21.9 ns &lt;\n Memory estimate: 0 bytes, allocs estimate: 0."
  },
  {
    "objectID": "p003.html",
    "href": "p003.html",
    "title": "Problem 3",
    "section": "",
    "text": "Problem\n\n\n\n\nThe prime factors of \\(13195\\) are \\(5, 7, 13\\) and \\(29\\).\n\n\nWhat is the largest prime factor of the number \\(600851475143\\)?\n\n\n\n\nJulia\n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\n\nfunction p3()\n  n = 600851475143\n  \n  # get all primes lesses than sqrt(n)\n  possible_primes = sieve_of_eratosthenes(isqrt(n)) # see prelude\n  \n  # get the biggest one\n  id = findlast(x -&gt; n % x == 0, possible_primes)    \n  return possible_primes[id]\nend;\n\np3()\n\n6857\n\n\n\nusing BenchmarkTools;\n@benchmark p3()\n\n\nBenchmarkTools.Trial: 1893 samples with 1 evaluation.\n Range (min … max):  2.314 ms …   5.055 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     2.533 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   2.638 ms ± 300.235 μs  ┊ GC (mean ± σ):  2.25% ± 4.85%\n      ▃█▂▂▁                                                    \n  ▂▂▃▄█████▆▅▄▃▃▂▂▂▂▃▃▄▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▂▁▁▁▂▂▁▂▁▂ ▃\n  2.31 ms         Histogram: frequency by time        4.03 ms &lt;\n Memory estimate: 6.48 MiB, allocs estimate: 8."
  },
  {
    "objectID": "p004.html",
    "href": "p004.html",
    "title": "Problem 4",
    "section": "",
    "text": "Problem\n\n\n\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two \\(2\\)-digit numbers is \\(9009 = 91 \\times 99\\).\n\n\nFind the largest palindrome made from the product of two \\(3\\)-digit numbers.\n\n\n\n\nJulia\n\nfunction is_palindrome(s::AbstractString)\n    l = length(s)\n\n    for i ∈ 1:fld(l, 2)\n        s[i] != s[l + 1 - i] && return false        \n    end\n\n    return true\nend;\n\nis_palindrome(n::Integer) = is_palindrome(string(n));\n\nfunction p4()\n  a, b, largest_palindrome = 0, 0, 0\n  \n  for x ∈ reverse(100:999)\n      for y ∈ reverse(100:999)\n          x &lt; y && continue\n          p = x * y\n          p &lt; largest_palindrome && break # we can break the inner loop, because the next product is going to be even lesser\n          if is_palindrome(p)\n            a, b, largest_palindrome = x, y, p \n          end\n      end\n  end\n\n  # if no palindrome was found:\n  return (a, b, a*b)\nend;\n\np4()\n\n(993, 913, 906609)\n\n\n\nusing BenchmarkTools;\n@benchmark p4()\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  349.601 μs …   5.049 ms  ┊ GC (min … max): 0.00% … 84.77%\n Time  (median):     386.531 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   458.974 μs ± 279.958 μs  ┊ GC (mean ± σ):  5.65% ±  8.92%\n  █▇▅▅▅▂▁▁        ▂▂▂▁                                          ▂\n  ████████████▇▇▇█████▇▄▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅▅▄▅ █\n  350 μs        Histogram: log(frequency) by time       2.34 ms &lt;\n Memory estimate: 526.28 KiB, allocs estimate: 12248."
  },
  {
    "objectID": "p005.html",
    "href": "p005.html",
    "title": "Problem 5",
    "section": "",
    "text": "Problem\n\n\n\n\n\\(2520\\) is the smallest number that can be divided by each of the numbers from \\(1\\) to \\(10\\) without any remainder.\n\n\nWhat is the smallest positive number that is evenly divisibledivisible with no remainder by all of the numbers from \\(1\\) to \\(20\\)?\n\n\n\n\nJulia (using lcm)\n\np5() = lcm(1:20...);\np5()\n\n232792560\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\n\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\n Range (min … max):  1.132 ns … 6.733 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.142 ns             ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.143 ns ± 0.084 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  ▁                                                  █       \n  █▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▅ ▂\n  1.13 ns        Histogram: frequency by time       1.14 ns &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\n\nJulia\n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\n\nfunction prime_decomposition(n::Integer)\n    possible_primes = sieve_of_eratosthenes(n)\n    temp_n = n\n    dec = Int32[]\n\n    while temp_n &gt; 1\n        for p ∈ possible_primes\n            q, r = divrem(temp_n, p)            \n            if iszero(r)\n                temp_n = temp_n ÷ p\n                push!(dec, p)\n                break\n            end\n        end\n    end\n    return dec\nend;\n\nfunction p5()\n    decomposition = map(prime_decomposition, 2:20)\n    distinct_primes = vcat(decomposition...) |&gt; unique\n\n    count_matrix = \n    map(distinct_primes) do p\n        map(decomposition) do d\n            count(==(p), d)\n        end\n    end |&gt; stack\n\n    primes_powers = map(maximum, eachcol(count_matrix))\n\n    n = (distinct_primes .^ primes_powers) |&gt; prod\n\n    return n\nend;\n\np5()\n\n232792560\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\n\nBenchmarkTools.Trial: 10000 samples with 6 evaluations.\n Range (min … max):  4.988 μs … 535.711 μs  ┊ GC (min … max):  0.00% … 97.74%\n Time  (median):     5.365 μs               ┊ GC (median):     0.00%\n Time  (mean ± σ):   6.367 μs ±  19.629 μs  ┊ GC (mean ± σ):  12.57% ±  4.03%\n   ▄▆██▇▆▄▃▃▂▁▁▁▁▂▂▁▁▁▁▁▁▁                                    ▂\n  ▇████████████████████████▇▇▇▆▆▅▅▆▆▅▅▅▅▅▃▅▄▃▄▄▃▄▃▄▃▄▃▄▄▄▅▅▃▄ █\n  4.99 μs      Histogram: log(frequency) by time      9.67 μs &lt;\n Memory estimate: 12.66 KiB, allocs estimate: 142."
  },
  {
    "objectID": "p006.html",
    "href": "p006.html",
    "title": "Problem 6",
    "section": "",
    "text": "Problem\n\n\n\n\nThe sum of the squares of the first ten natural numbers is \\(1^2+ 2 ^2+ \\dots + 10^2 = 385.\\)\n\n\nThe square of the sum of the first ten natural numbers is \\((1+ 2+ \\dots + 10)^2 = 3025.\\)\n\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is \\(3025-385 = 2640.\\)\n\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n\n\n\nJulia\n\nfunction p6()\n  sum(1:100)^2 - sum((1:100).^2)\nend;\np6()\n\n25164150\n\n\n\nusing BenchmarkTools;\n@benchmark p6()\n\n\nBenchmarkTools.Trial: 10000 samples with 983 evaluations.\n Range (min … max):   41.003 ns …  1.133 μs  ┊ GC (min … max):  0.00% … 83.55%\n Time  (median):      84.259 ns              ┊ GC (median):     0.00%\n Time  (mean ± σ):   104.053 ns ± 88.673 ns  ┊ GC (mean ± σ):  10.16% ± 10.64%\n     █▇▆▅▄▂▂                                                   ▂\n  ▅▅███████████▇▇▇▆▆▅▅▄▅▄▃▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▃▃▃▃▄▅▄▄▄▆▅▆▆▇▆▅ █\n  41 ns         Histogram: log(frequency) by time       689 ns &lt;\n Memory estimate: 896 bytes, allocs estimate: 1."
  },
  {
    "objectID": "p007.html",
    "href": "p007.html",
    "title": "Problem 7",
    "section": "",
    "text": "Problem\n\n\n\n\nBy listing the first six prime numbers: \\(2, 3, 5, 7, 11\\), and \\(13\\), we can see that the \\(6\\)th prime is \\(13\\).\n\n\nWhat is the \\(10\\,001\\)st prime number?\n\n\n\n\nJulia\n\nis_divisible_by(n::Integer, q::Integer) = n % q == 0;\n\nfunction find_next_prime(primes)\n    n = primes[end]\n    while true        \n        n += 2\n\n        not_prime = false\n    \n        for q ∈ primes\n            not_prime = is_divisible_by(n, q)\n            if not_prime\n                break                \n            end            \n        end\n\n        if not_prime \n            continue \n        end\n    \n        return(n)        \n    end    \nend;\n\nfunction find_n_primes(n::Integer)\n    primes = [2, 3]\n    while length(primes) &lt; n\n        next_prime = find_next_prime(primes)\n        push!(primes, next_prime)\n    end\n\n    return primes\nend;\n\np7() = find_n_primes(10_001)[end];\np7()\n\n104743\n\n\n\nusing BenchmarkTools;\n@benchmark p7()\n\n\nBenchmarkTools.Trial: 63 samples with 1 evaluation.\n Range (min … max):  79.467 ms … 79.567 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     79.493 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   79.496 ms ± 21.702 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n    ▆  ▁     █ ▁  ▃ ▁▁                                         \n  ▇▁█▇▁█▄▄▁▇▄█▄█▄▄█▇██▄▄▄▇▁▇▇▄▁▄▇▄▁▁▁▁▄▁▁▄▁▁▄▁▇▄▁▁▁▁▁▁▁▁▁▁▁▁▄ ▁\n  79.5 ms         Histogram: frequency by time        79.6 ms &lt;\n Memory estimate: 326.56 KiB, allocs estimate: 9."
  },
  {
    "objectID": "p008.html",
    "href": "p008.html",
    "title": "Problem 8",
    "section": "",
    "text": "Problem\n\n\n\n\nThe four adjacent digits in the \\(1000\\)-digit number that have the greatest product are \\(9 \\times 9 \\times 8 \\times 9 = 5832\\).\n\n\n73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450\n\n\nFind the thirteen adjacent digits in the \\(1000\\)-digit number that have the greatest product. What is the value of this product?\n\n\n\n\nJulia\n\nfunction p8()\n  big_string = \"73167176531330624919225119674426574742355349194934\n      96983520312774506326239578318016984801869478851843\n      85861560789112949495459501737958331952853208805511\n      12540698747158523863050715693290963295227443043557\n      66896648950445244523161731856403098711121722383113\n      62229893423380308135336276614282806444486645238749\n      30358907296290491560440772390713810515859307960866\n      70172427121883998797908792274921901699720888093776\n      65727333001053367881220235421809751254540594752243\n      52584907711670556013604839586446706324415722155397\n      53697817977846174064955149290862569321978468622482\n      83972241375657056057490261407972968652414535100474\n      82166370484403199890008895243450658541227588666881\n      16427171479924442928230863465674813919123162824586\n      17866458359124566529476545682848912883142607690042\n      24219022671055626321111109370544217506941658960408\n      07198403850962455444362981230987879927244284909188\n      84580156166097919133875499200524063689912560717606\n      05886116467109405077541002256983155200055935729725\n      71636269561882670428252483600823257530420752963450\" |&gt; filter(isnumeric) # keep only numeric characters\n  \n  biggest_product = 0\n  winner_string = \"\"\n  amount_of_digits = 12\n  \n  for i in (amount_of_digits + 1):length(big_string)\n    current_string = collect(big_string[i-amount_of_digits : i])\n    \n    p = map(x -&gt; parse(Int32, x), current_string) |&gt; prod\n    if p &gt; biggest_product\n      biggest_product = p\n      winner_string = current_string\n    end\n  end\n  \n  return reduce(*, winner_string), biggest_product\nend;\n\np8()\n\n(\"5576689664895\", 23514624000)\n\n\n\nusing BenchmarkTools;\n@benchmark p8()\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  112.113 μs …  1.657 ms  ┊ GC (min … max): 0.00% … 91.25%\n Time  (median):     115.619 μs              ┊ GC (median):    0.00%\n Time  (mean ± σ):   123.760 μs ± 89.008 μs  ┊ GC (mean ± σ):  5.25% ±  6.65%\n   ▂▇█▇▅▄▃▃▃▂▂▁▁                                               ▂\n  ▆████████████████▇▇▇▅▆▁▅▁▄▄▄▁▁▁▃▁▃▁▁▄▃▁▃▁▁▁▁▁▁▃▁▃▃▄▆▆▅▄▄▇▇██ █\n  112 μs        Histogram: log(frequency) by time       167 μs &lt;\n Memory estimate: 249.22 KiB, allocs estimate: 3000."
  },
  {
    "objectID": "p009.html",
    "href": "p009.html",
    "title": "Problem 9",
    "section": "",
    "text": "Problem\n\n\n\n\nA Pythagorean triplet is a set of three natural numbers, \\(a \\lt b \\lt c\\), for which, \\(a^2 + b^2 = c^2.\\)\n\n\nFor example, \\(3^2 + 4^2 = 9 + 16 = 25 = 5^2\\).\n\n\nThere exists exactly one Pythagorean triplet for which \\(a + b + c = 1000\\).Find the product \\(abc\\).\n\n\n\n\nJulia\n\nfunction p9()\n    for a ∈ 1:999\n        for b ∈ 1:999            \n            c = 1000 - a - b\n            c &gt;= 1 || continue\n            a^2 + b^2 == c^2 || continue                        \n            return a, b, c\n        end\n    end\nend;\n\np9()\n\n(200, 375, 425)\n\n\n\nusing BenchmarkTools;\n@benchmark p9()\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  91.444 μs … 152.590 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     92.125 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   92.851 μs ±   6.246 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  █ ▂                                                          ▁\n  ████▄▄▃▄▄█▆▁▄▁▄▃▁▃▄▁▁▃▁▁▁▃▁▁▁▁▃▁▁▁▁▁▁▁▃▁▁▁▃▁▁▃▁▁▁▁▁▁▃▁▃▁▁▁▁▇ █\n  91.4 μs       Histogram: log(frequency) by time       138 μs &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\n\nJulia (using JuMP)\n\nusing JuMP; using SCIP;\n\nfunction p9()\n  model = Model(SCIP.Optimizer)\n  set_silent(model)\n  @variable(model, a &gt;= 1, Int)\n  @variable(model, b &gt;= 1, Int)\n  @variable(model, c &gt;= 1, Int)\n  @objective(model, Min, a)\n  @constraint(model, pitagorean, a^2 + b^2 == c^2)\n  @constraint(model, sum_1000, a + b + c == 1000)  \n  optimize!(model)    \n  return value(a), value(b), value(c)\nend;\np9()\n\n(200.0, 375.0, 425.0)\n\n\n\nusing BenchmarkTools;\n@benchmark p9()\n\n\nBenchmarkTools.Trial: 56 samples with 1 evaluation.\n Range (min … max):  88.545 ms …  95.198 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     89.143 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   89.372 ms ± 983.382 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n      ▁█▃▁  ▁█     ▁   ▁                                        \n  ▄▇▁▇████▄▇██▇▄▄▁▇█▇▇▁█▁▁▁▁▄▄▄▁▁▁▁▁▁▄▁▁▁▁▁▁▁▁▁▁▁▄▁▁▁▁▁▁▁▁▁▁▁▄ ▁\n  88.5 ms         Histogram: frequency by time         91.8 ms &lt;\n Memory estimate: 120.80 KiB, allocs estimate: 5135."
  },
  {
    "objectID": "p010.html",
    "href": "p010.html",
    "title": "Problem 10",
    "section": "",
    "text": "Problem\n\n\n\n\nThe sum of the primes below \\(10\\) is \\(2 + 3 + 5 + 7 = 17\\).\n\n\nFind the sum of all the primes below two million.\n\n\n\n\nJulia\n\n# define a function that give prime numbers up to n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\n\nfunction p10()\n  sieve_of_eratosthenes(2_000_000) |&gt; sum\nend;\np10()\n\n142913828922\n\n\n\nusing BenchmarkTools;\n@benchmark p10()\n\n\nBenchmarkTools.Trial: 786 samples with 1 evaluation.\n Range (min … max):  6.028 ms …   7.115 ms  ┊ GC (min … max): 0.00% … 9.21%\n Time  (median):     6.350 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   6.365 ms ± 153.753 μs  ┊ GC (mean ± σ):  1.76% ± 2.59%\n            ▁▁▂ ▅▃▆▂▃▃▄▃▅▆█▄▂▁▃▂▃                              \n  ▂▁▁▃▂▃▄▄▆▆██████████████████████▇▄█▅▅▆▅▃▄▅▅▃▃▂▃▁▄▁▃▃▃▂▁▁▃▂▃ ▄\n  6.03 ms         Histogram: frequency by time        6.85 ms &lt;\n Memory estimate: 16.63 MiB, allocs estimate: 8."
  },
  {
    "objectID": "p013.html",
    "href": "p013.html",
    "title": "Problem 13",
    "section": "",
    "text": "Problem\n\n\n\n\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n\nn\n\n\n\nfunction p13()\n    str = \"37107287533902102798797998220837590246510135740250\n    46376937677490009712648124896970078050417018260538\n    74324986199524741059474233309513058123726617309629\n    91942213363574161572522430563301811072406154908250\n    23067588207539346171171980310421047513778063246676\n    89261670696623633820136378418383684178734361726757\n    28112879812849979408065481931592621691275889832738\n    44274228917432520321923589422876796487670272189318\n    47451445736001306439091167216856844588711603153276\n    70386486105843025439939619828917593665686757934951\n    62176457141856560629502157223196586755079324193331\n    64906352462741904929101432445813822663347944758178\n    92575867718337217661963751590579239728245598838407\n    58203565325359399008402633568948830189458628227828\n    80181199384826282014278194139940567587151170094390\n    35398664372827112653829987240784473053190104293586\n    86515506006295864861532075273371959191420517255829\n    71693888707715466499115593487603532921714970056938\n    54370070576826684624621495650076471787294438377604\n    53282654108756828443191190634694037855217779295145\n    36123272525000296071075082563815656710885258350721\n    45876576172410976447339110607218265236877223636045\n    17423706905851860660448207621209813287860733969412\n    81142660418086830619328460811191061556940512689692\n    51934325451728388641918047049293215058642563049483\n    62467221648435076201727918039944693004732956340691\n    15732444386908125794514089057706229429197107928209\n    55037687525678773091862540744969844508330393682126\n    18336384825330154686196124348767681297534375946515\n    80386287592878490201521685554828717201219257766954\n    78182833757993103614740356856449095527097864797581\n    16726320100436897842553539920931837441497806860984\n    48403098129077791799088218795327364475675590848030\n    87086987551392711854517078544161852424320693150332\n    59959406895756536782107074926966537676326235447210\n    69793950679652694742597709739166693763042633987085\n    41052684708299085211399427365734116182760315001271\n    65378607361501080857009149939512557028198746004375\n    35829035317434717326932123578154982629742552737307\n    94953759765105305946966067683156574377167401875275\n    88902802571733229619176668713819931811048770190271\n    25267680276078003013678680992525463401061632866526\n    36270218540497705585629946580636237993140746255962\n    24074486908231174977792365466257246923322810917141\n    91430288197103288597806669760892938638285025333403\n    34413065578016127815921815005561868836468420090470\n    23053081172816430487623791969842487255036638784583\n    11487696932154902810424020138335124462181441773470\n    63783299490636259666498587618221225225512486764533\n    67720186971698544312419572409913959008952310058822\n    95548255300263520781532296796249481641953868218774\n    76085327132285723110424803456124867697064507995236\n    37774242535411291684276865538926205024910326572967\n    23701913275725675285653248258265463092207058596522\n    29798860272258331913126375147341994889534765745501\n    18495701454879288984856827726077713721403798879715\n    38298203783031473527721580348144513491373226651381\n    34829543829199918180278916522431027392251122869539\n    40957953066405232632538044100059654939159879593635\n    29746152185502371307642255121183693803580388584903\n    41698116222072977186158236678424689157993532961922\n    62467957194401269043877107275048102390895523597457\n    23189706772547915061505504953922979530901129967519\n    86188088225875314529584099251203829009407770775672\n    11306739708304724483816533873502340845647058077308\n    82959174767140363198008187129011875491310547126581\n    97623331044818386269515456334926366572897563400500\n    42846280183517070527831839425882145521227251250327\n    55121603546981200581762165212827652751691296897789\n    32238195734329339946437501907836945765883352399886\n    75506164965184775180738168837861091527357929701337\n    62177842752192623401942399639168044983993173312731\n    32924185707147349566916674687634660915035914677504\n    99518671430235219628894890102423325116913619626622\n    73267460800591547471830798392868535206946944540724\n    76841822524674417161514036427982273348055556214818\n    97142617910342598647204516893989422179826088076852\n    87783646182799346313767754307809363333018982642090\n    10848802521674670883215120185883543223812876952786\n    71329612474782464538636993009049310363619763878039\n    62184073572399794223406235393808339651327408011116\n    66627891981488087797941876876144230030984490851411\n    60661826293682836764744779239180335110989069790714\n    85786944089552990653640447425576083659976645795096\n    66024396409905389607120198219976047599490197230297\n    64913982680032973156037120041377903785566085089252\n    16730939319872750275468906903707539413042652315011\n    94809377245048795150954100921645863754710598436791\n    78639167021187492431995700641917969777599028300699\n    15368713711936614952811305876380278410754449733078\n    40789923115535562561142322423255033685442488917353\n    44889911501440648020369068063960672322193204149535\n    41503128880339536053299340368006977710650566631954\n    81234880673210146739058568557934581403627822703280\n    82616570773948327592232845941706525094512325230608\n    22918802058777319719839450180888072429661980811197\n    77158542502016545090413245809786882778948721859617\n    72107838435069186155435662884062257473692284509516\n    20849603980134001723930671666823555245252804609722\n    53503534226472524250874054075591789781264330331690\"\n\n    numbers = \n        split(str, \"\\n\") .|&gt; \n        (x -&gt; parse(BigInt, x))\n\n    total = sum(numbers)\n\n    ten_digits = string(total)[1:10]\n\n    return ten_digits\nend;\n\np13()\n\n\"5537376230\"\n\n\n\nusing BenchmarkTools;\n@benchmark p13()\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  18.696 μs …  12.609 ms  ┊ GC (min … max): 0.00% … 53.40%\n Time  (median):     19.788 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   22.733 μs ± 168.372 μs  ┊ GC (mean ± σ):  5.30% ±  0.71%\n     ▃▆█▄▂                                                      \n  ▂▃▆█████▇▇▆▅▅▅▅▄▄▄▄▃▃▃▃▃▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂\n  18.7 μs         Histogram: frequency by time         26.8 μs &lt;\n Memory estimate: 19.82 KiB, allocs estimate: 411."
  },
  {
    "objectID": "p014.html",
    "href": "p014.html",
    "title": "Problem 14",
    "section": "",
    "text": "Problem\n\n\n\n\nThe following iterative sequence is defined for the set of positive integers:\n\n\n\n\\(n \\to n/2\\) (\\(n\\) is even)\n\n\n\\(n \\to 3n + 1\\) (\\(n\\) is odd)\n\n\n\nUsing the rule above and starting with \\(13\\), we generate the following sequence: \\(13 \\to 40 \\to 20 \\to 10 \\to 5 \\to 16 \\to 8 \\to 4 \\to 2 \\to 1.\\)\n\n\nIt can be seen that this sequence (starting at \\(13\\) and finishing at \\(1\\)) contains \\(10\\) terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at \\(1\\).\n\n\nWhich starting number, under one million, produces the longest chain?\n\n\nNOTE: Once the chain starts the terms are allowed to go above one million.\n\n\n\n\nJulia\n\nfunction collatz(n::Integer)\n    seq = BigInt[]\n\n    s = BigInt(n)\n\n    while s &gt; 1\n        push!(seq, s)\n\n        if s % 2 == 0\n            s = div(s, 2)\n        else\n            s = 3*s + 1\n        end\n    end \n\n    push!(seq, 1)\n    \n    return seq\nend\n\ncollatz (generic function with 1 method)\n\n\n\nfunction p14()\n\n    n, max_chain_length = 1, 1\n\n    for i ∈ 1:999_999\n        c = collatz(i)\n        l = length(c)\n\n        if l &gt; max_chain_length\n            n, max_chain_length = i, l\n        end\n    end\n\n    return \"The biggest chain starts in $n and has $max_chain_length\"\nend;\n\n# p14()\n\n\n# using BenchmarkTools;\n# @benchmark p14()"
  }
]