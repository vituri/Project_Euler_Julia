{
  "hash": "c0090b824983753917474d17b338831f",
  "result": {
    "markdown": "# Problem 5 {.unnumbered}\n      \n::: {.callout-note icon=false}\n## Problem\n\n<p>$2520$ is the smallest number that can be divided by each of the numbers from $1$ to $10$ without any remainder.</p>\n<p>What is the smallest positive number that is <dfn class=\"tooltip\">evenly divisible<span class=\"tooltiptext\">divisible with no remainder</span></dfn> by all of the numbers from $1$ to $20$?</p>\n:::\n\n### Julia (using lcm)\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\np5() = lcm(1:20...);\np5()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n232792560\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p5()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>BenchmarkTools.Trial: 10000 samples with 1000 evaluations.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">1.132 ns</span> … <span class=\"ansi-magenta-fg\">6.733 ns</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">1.142 ns             </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">1.143 ns</span> ± <span class=\"ansi-green-fg\">0.084 ns</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.00% ± 0.00%\n  ▁                                                  █<span class=\"ansi-blue-fg\"> </span>     <span class=\"ansi-green-fg\"> </span>\n  █▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█<span class=\"ansi-blue-fg\">▁</span>▁▁▁▅ <span class=\"ansi-green-fg\">▂</span>\n  1.13 ns<span class=\"ansi-bright-black-fg\">        Histogram: frequency by time</span>       1.14 ns <span class=\"ansi-bold\">&lt;</span>\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">0 bytes</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">0</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n### Julia\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nfunction prime_decomposition(n::Integer)\n    possible_primes = sieve_of_eratosthenes(n)\n    temp_n = n\n    dec = Int32[]\n\n    while temp_n > 1\n        for p ∈ possible_primes\n            q, r = divrem(temp_n, p)            \n            if iszero(r)\n                temp_n = temp_n ÷ p\n                push!(dec, p)\n                break\n            end\n        end\n    end\n    return dec\nend;\n\nfunction p5()\n    decomposition = map(prime_decomposition, 2:20)\n    distinct_primes = vcat(decomposition...) |> unique\n\n    count_matrix = \n    map(distinct_primes) do p\n        map(decomposition) do d\n            count(==(p), d)\n        end\n    end |> stack\n\n    primes_powers = map(maximum, eachcol(count_matrix))\n\n    n = (distinct_primes .^ primes_powers) |> prod\n\n    return n\nend;\n\np5()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n232792560\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p5()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>BenchmarkTools.Trial: 10000 samples with 6 evaluations.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">4.988 μs</span> … <span class=\"ansi-magenta-fg\">535.711 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span> 0.00% … 97.74%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">5.365 μs               </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span> 0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">6.367 μs</span> ± <span class=\"ansi-green-fg\"> 19.629 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>12.57% ±  4.03%\n   ▄▆██<span class=\"ansi-blue-fg\">▇</span>▆▄▃▃▂▁▁▁▁▂▂<span class=\"ansi-green-fg\">▁</span>▁▁▁▁▁▁                                    ▂\n  ▇████<span class=\"ansi-blue-fg\">█</span>███████████<span class=\"ansi-green-fg\">█</span>███████▇▇▇▆▆▅▅▆▆▅▅▅▅▅▃▅▄▃▄▄▃▄▃▄▃▄▃▄▄▄▅▅▃▄ █\n  4.99 μs<span class=\"ansi-bright-black-fg\">      </span><span class=\"ansi-bright-black-fg\">Histogram: </span><span class=\"ansi-bright-black-fg ansi-bold\">log(</span><span class=\"ansi-bright-black-fg\">frequency</span><span class=\"ansi-bright-black-fg ansi-bold\">)</span><span class=\"ansi-bright-black-fg\"> by time</span>      9.67 μs <span class=\"ansi-bold\">&lt;</span>\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">12.66 KiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">142</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "p005_files"
    ],
    "filters": [],
    "includes": {}
  }
}