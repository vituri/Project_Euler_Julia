{
  "hash": "4d4b127c7eb54274eaedb93dd2df9406",
  "result": {
    "markdown": "# Problem 4 {.unnumbered}\n      \n::: {.callout-note icon=false}\n## Problem\n\n<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009 = 91 \\times 99$.</p>\n<p>Find the largest palindrome made from the product of two $3$-digit numbers.</p>\n:::\n\n### Julia\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction is_palindrome(s::AbstractString)\n    l = length(s)\n\n    for i ∈ 1:fld(l, 2)\n        s[i] != s[l + 1 - i] && return false        \n    end\n\n    return true\nend;\n\nis_palindrome(n::Integer) = is_palindrome(string(n));\n\nfunction p4()\n  a, b, largest_palindrome = 0, 0, 0\n  \n  for x ∈ reverse(100:999)\n      for y ∈ reverse(100:999)\n          x < y && continue\n          p = x * y\n          p < largest_palindrome && break # we can break the inner loop, because the next product is going to be even lesser\n          if is_palindrome(p)\n            a, b, largest_palindrome = x, y, p \n          end\n      end\n  end\n\n  # if no palindrome was found:\n  return (a, b, a*b)\nend;\n\np4()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(993, 913, 906609)\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p4()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>BenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">258.771 μs</span> … <span class=\"ansi-magenta-fg\">  3.635 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 80.36%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">273.467 μs               </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">309.628 μs</span> ± <span class=\"ansi-green-fg\">226.736 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>7.65% ±  9.29%\n  <span class=\"ansi-blue-fg\">█</span>▆<span class=\"ansi-green-fg\">▄</span>▃▁                                                         ▁\n  <span class=\"ansi-blue-fg\">█</span>█<span class=\"ansi-green-fg\">█</span>██▇▇▅▅▅▄▅▃▆▆▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▅▆ █\n  259 μs<span class=\"ansi-bright-black-fg\">        </span><span class=\"ansi-bright-black-fg\">Histogram: </span><span class=\"ansi-bright-black-fg ansi-bold\">log(</span><span class=\"ansi-bright-black-fg\">frequency</span><span class=\"ansi-bright-black-fg ansi-bold\">)</span><span class=\"ansi-bright-black-fg\"> by time</span>       2.11 ms <span class=\"ansi-bold\">&lt;</span>\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">526.28 KiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">12248</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "p004_files"
    ],
    "filters": [],
    "includes": {}
  }
}