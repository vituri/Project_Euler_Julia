{
  "hash": "6d08dd0828a048a3a50181756a3eeded",
  "result": {
    "markdown": "# Problem 3 {.unnumbered}\n\n::: {.callout-note icon=false}\n## Problem\n  \n<p>The prime factors of $13195$ are $5, 7, 13$ and $29$.</p>\n<p>What is the largest prime factor of the number $600851475143$?</p>\n:::\n  \n### Julia\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nfunction p3()\n  n = 600851475143\n  \n  # get all primes lesses than sqrt(n)\n  possible_primes = sieve_of_eratosthenes(isqrt(n)) # see prelude\n  \n  # get the biggest one\n  id = findlast(x -> n % x == 0, possible_primes)    \n  return possible_primes[id]\nend;\n\np3()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n6857\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p3()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>BenchmarkTools.Trial: 1940 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">2.252 ms</span> … <span class=\"ansi-magenta-fg\">  4.883 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 14.02%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">2.475 ms               </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">2.574 ms</span> ± <span class=\"ansi-green-fg\">276.877 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>1.99% ±  4.32%\n       ▇█▃▁<span class=\"ansi-blue-fg\"> </span>   <span class=\"ansi-green-fg\"> </span>                                               \n  ▃▂▃▃▅████<span class=\"ansi-blue-fg\">█</span>█▇▅<span class=\"ansi-green-fg\">▄</span>▄▄▄▃▄▃▃▃▃▄▃▃▃▃▃▃▂▂▃▃▂▂▃▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▃\n  2.25 ms<span class=\"ansi-bright-black-fg\">         Histogram: frequency by time</span>        3.67 ms <span class=\"ansi-bold\">&lt;</span>\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">6.48 MiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">8</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "p003_files"
    ],
    "filters": [],
    "includes": {}
  }
}