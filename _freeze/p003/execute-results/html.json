{
  "hash": "44b054088d5433a978a5263e109112b9",
  "result": {
    "markdown": "# Problem 3 {.unnumbered}\n\n::: {.callout-note icon=false}\n## Problem\n  \n<p>The prime factors of $13195$ are $5, 7, 13$ and $29$.</p>\n<p>What is the largest prime factor of the number $600851475143$?</p>\n:::\n\n### Julia\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ninclude(\"euler.jl\")\n\nfunction p3(n = 600851475143)\n  Euler.prime_factors(n) |> maximum\nend;\n\np3()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING: replacing module Euler.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n6857\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p3()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>BenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">15.578 μs</span> … <span class=\"ansi-magenta-fg\">39.393 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">15.669 μs              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">16.353 μs</span> ± <span class=\"ansi-green-fg\"> 1.768 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.00% ± 0.00%\n  █<span class=\"ansi-blue-fg\">▆</span>▂    <span class=\"ansi-green-fg\"> </span>                        ▁▂▂▁▁              ▁        ▁\n  █<span class=\"ansi-blue-fg\">█</span>█▇█▅▄<span class=\"ansi-green-fg\">▅</span>▅▇▃▅▃▅▄▄▅▄▄▅▅▅▇▅▃▄▄▅▁▁▅▇███████▇▅▆▆▇▇████████▇▇▆▇▇▇ █\n  15.6 μs<span class=\"ansi-bright-black-fg\">      </span><span class=\"ansi-bright-black-fg\">Histogram: </span><span class=\"ansi-bright-black-fg ansi-bold\">log(</span><span class=\"ansi-bright-black-fg\">frequency</span><span class=\"ansi-bright-black-fg ansi-bold\">)</span><span class=\"ansi-bright-black-fg\"> by time</span>      22.1 μs <span class=\"ansi-bold\">&lt;</span>\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">144 bytes</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">2</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n### Julia (calculating all the primes beforehand)\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ninclude(\"euler.jl\")\n\nfunction p3()\n  n = 600851475143\n  \n  # get all primes lesses than sqrt(n)\n  possible_primes = Euler.sieve_of_eratosthenes(isqrt(n)) # see prelude\n  \n  # get the biggest one\n  id = findlast(x -> n % x == 0, possible_primes)    \n  return possible_primes[id]\nend;\n\np3()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING: replacing module Euler.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n6857\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p3()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>BenchmarkTools.Trial: 1966 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">2.255 ms</span> … <span class=\"ansi-magenta-fg\">  4.357 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 20.66%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">2.458 ms               </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">2.542 ms</span> ± <span class=\"ansi-green-fg\">224.887 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>2.84% ±  5.96%\n         ▅▇█▄<span class=\"ansi-blue-fg\">▄</span>▂▁  <span class=\"ansi-green-fg\"> </span>                                            \n  ▁▁▁▁▂▃▇████<span class=\"ansi-blue-fg\">█</span>██▆▅<span class=\"ansi-green-fg\">▄</span>▄▃▂▂▂▂▂▂▁▁▁▂▁▂▁▁▁▁▂▁▁▂▂▂▃▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁ ▂\n  2.26 ms<span class=\"ansi-bright-black-fg\">         Histogram: frequency by time</span>        3.31 ms <span class=\"ansi-bold\">&lt;</span>\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">6.48 MiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">8</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "p003_files"
    ],
    "filters": [],
    "includes": {}
  }
}